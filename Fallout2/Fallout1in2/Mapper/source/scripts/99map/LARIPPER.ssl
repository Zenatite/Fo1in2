/*

   Boneyard - Rippers / old Cinema

*/

#include "define.h"
#include "command.h"
#include "updatmap.h"
#include "maps/laripper.h"
#include "area/boneyard.h"
#include "sfall/sfall.h"

procedure start;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure map_exit_p_proc;

procedure map_lightning;
procedure PlaceCritter;

procedure start begin
end

procedure map_enter_p_proc begin
   variable rnd;
   set_global_var(GVAR_MARK_LA_5, 1);

   call map_lightning;

   if not(is_loading_game) then begin
      if ((map_var(MVAR_IsMommyDead) == 0) and (((game_time / 10) - global_var(GVAR_DEATHCLAWS_TIMER)) > (60 * 60))) then begin
         set_global_var(GVAR_DEATHCLAWS_TIMER, game_time / 10);
         if (map_var(MVAR_RoamingCount) == 0) then begin
            rnd := random(2, 3);
            set_map_var(MVAR_RoamingCount, rnd);
            set_map_var(MVAR_NewCount, rnd);
            call PlaceCritter;
         end
         else if (map_var(MVAR_RoamingCount) == 1) then begin
            rnd := random(1, 2);
            set_map_var(MVAR_RoamingCount, rnd + 1);
            set_map_var(MVAR_NewCount, rnd);
            call PlaceCritter;
         end
         else if (map_var(MVAR_RoamingCount) == 2) then begin
            if (random(0, 1)) then begin
               set_map_var(MVAR_RoamingCount, 3);
               set_map_var(MVAR_NewCount, 1);
               call PlaceCritter;
            end
         end
      end
   end

   // Can't rest here as long as MOMCLAW is still alive.
   if (global_var(GVAR_DEATHCLAWS_KILLED) >= 2) then begin
      set_rest_mode(0);
   end
   else begin
      set_rest_mode(RESTMODE_STRICT);
   end

   override_map_start(96, 121, 0, 0);

   set_global_var(GVAR_LOAD_MAP_INDEX, 0);
end

procedure map_update_p_proc begin
   call map_lightning;
end

procedure map_exit_p_proc begin
   if ((map_var(MVAR_IsMommyDead) == 1) and (map_var(MVAR_RoamingCount) == 0) and (map_var(MVAR_EggCount) == 0)) then begin
      if (global_var(GVAR_DEATHCLAWS_KILLED) != 2) then begin
         set_all_deathclaws_killed;
         inc_boneyard_rep(REP_BONUS_DEATHCLAWS_DEAD);
      end
   end
   set_rest_mode(0);

   set_map_var(MVAR_LastVisit, (game_time + ONE_GAME_DAY));
end

procedure map_lightning begin
   if (dude_elevation == 1) then
      Darkness;
   else
      Lighting;
end

procedure PlaceCritter begin
   variable
      critter := 0,
      hex := 0,
      rnd := 0,
      count := 0;

   count := map_var(MVAR_NewCount);
   while(count > 0) do begin
      // If enabled, small deathclaws initialy spawn and will later get replaced by bigger ones
      if fo1in2_fo2_critters_enabled then begin
         critter := create_object_sid(PID_DEATHCLAW_SMALL, 0, 0, SCRIPT_ROAMCLAW);
      end
      else begin
         critter := create_object_sid(PID_DEATHCLAW, 0, 0, SCRIPT_ROAMCLAW);
      end

      get_roamclaw_spawn_hex;
      critter_attempt_placement(critter, hex, 0);
      obj_rotate(critter, random(0, 5));
      count := count - 1;
   end

   // Cleanup dead corpses a little faster. We pretend the new deathclaws were hungry and ate them
   foreach critter in list_as_array(LIST_CRITTERS) begin
      if (critter_state(critter) == CRITTER_IS_DEAD) then begin
         if ((obj_pid(critter) == PID_DEATHCLAW) or (obj_pid(critter) == PID_DEATHCLAW_SMALL)) then begin
            destroy_object(critter);
         end
      end
   end
end
