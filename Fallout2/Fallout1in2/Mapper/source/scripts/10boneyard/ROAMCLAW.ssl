/*

   Boneyard - Rippers, roaming Deathclaws

*/

/* Include Files */
#include "define.h"
#include "maps/laripper.h"
#include "command.h"

procedure start;
procedure map_enter_p_proc;
procedure destroy_p_proc;
procedure timed_event_p_proc;
procedure critter_p_proc;
procedure damage_p_proc;

variable tmp_hostile;
variable Only_Once := 1;
variable hex;
variable rnd;

procedure start begin
   if Only_Once then begin
      Only_Once := 0;
      add_timer_event(self_obj, game_ticks(random(3, 5)), 1);
   end
end

procedure map_enter_p_proc begin
   // Replace small deathclaw with big deathclaw after some time has passed
   if (self_pid == PID_DEATHCLAW_SMALL) then begin
      if (game_time > map_var(MVAR_LastVisit)) then begin
         variable critter := create_object_sid(PID_DEATHCLAW, 0, 0, SCRIPT_ROAMCLAW);
         critter_attempt_placement(critter, self_tile, self_elevation);
         obj_rotate(critter, random(0, 5));
         destroy_object(self_obj);
      end
   end

   // Fail-safe, in case a Roamclaw gets out of bounds.
   // Hex coordinates are taken from LARIPPER.ssl for consistency.
   if (days_since_visited > 0) then begin
      rnd := random(1, 7);
      if (rnd == 1) then
         hex := 16890;
      else if (rnd == 2) then
         hex := 17269;
      else if (rnd == 3) then
         hex := 23492;
      else if (rnd == 4) then
         hex := 15885;
      else if (rnd == 5) then
         hex := 12287;
      else if (rnd == 6) then
         hex := 17511;
      else if (rnd == 7) then
         hex := 15475;

      critter_attempt_placement(self_obj, hex, self_elevation);
   end
end

procedure destroy_p_proc begin
   debug_warning("destroy!");
   set_map_var(MVAR_RoamingCount, (map_var(MVAR_RoamingCount) - 1));
   inc_evil_critter
end

procedure timed_event_p_proc begin
   if not(combat_is_initialized) then begin
      self_walk_to_tile(tile_num_in_direction(self_tile, random(0, 5), random(1, 5)));
   end
   add_timer_event(self_obj, game_ticks(random(3, 5)), 1);
end

procedure critter_p_proc begin
   if (tmp_hostile) then begin
      tmp_hostile := 0;
      attack(dude_obj);
   end
   else begin
      if self_can_see_dude then begin
         tmp_hostile := 1;
         attack(dude_obj);
      end
   end
end

procedure damage_p_proc begin
   if obj_in_party(source_obj) then begin
      tmp_hostile := 1;
   end
end
