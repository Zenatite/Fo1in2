/*

   Raiders / Khans - Tandi cell door script

*/

#include "define.h"
#include "command.h"
#include "maps/raiders.h"

#define NAME                     SCRIPT_DOOR

procedure start;
procedure map_enter_p_proc;
procedure use_p_proc;
procedure use_skill_on_p_proc;
procedure description_p_proc;
procedure use_obj_on_p_proc;
procedure map_update_p_proc;
procedure damage_p_proc;

#define STATE_ACTIVE       0
#define STATE_INACTIVE     1

#define LVAR_Locked                     (0)
#define LVAR_Gave_Locks_XP              (5)

import variable Cell_Door_Ptr;

procedure start begin
end

procedure map_enter_p_proc begin
   // If the player has unlocked and opened the cell door in a previous visit, close it again.
   if tandi_is_kidnapped then begin
      set_local_var(LVAR_Locked, STATE_ACTIVE);
      set_map_var(MVAR_OPENING_DOOR, 0);

      obj_close(self_obj);
      obj_lock(self_obj);
   end
end

procedure use_p_proc begin
   if (local_var(LVAR_Locked) == STATE_ACTIVE) then begin
      obj_lock(self_obj);
   end
   else begin
      obj_unlock(self_obj);
   end

   if (local_var(LVAR_Locked) == STATE_ACTIVE) then begin
      script_overrides;
      display_msg(mstr(104));//{104}{}{The door is locked.}
   end
   else begin
      if (map_var(MVAR_OPENING_DOOR) == 0) then begin
         set_map_var(MVAR_OPENING_DOOR, 1);
      end
   end
end

procedure use_skill_on_p_proc begin
   variable LVar0 := 0;

   if (action_being_used == SKILL_LOCKPICK) then begin
      if (local_var(LVAR_Locked) == STATE_ACTIVE) then begin
         script_overrides;
         LVar0 := roll_vs_skill(source_obj, SKILL_LOCKPICK, 0);
         if (is_success(LVar0)) then begin
            set_local_var(LVAR_Locked, STATE_INACTIVE);
            jam_lock(self_obj);
            if source_is_dude then
               display_msg(mstr(100));
            else
               display_msg(obj_name(source_obj) + message_str(SCRIPT_JUNKJAIL, 200));

            if (local_var(LVAR_Gave_Locks_XP) == 0) then begin
               set_local_var(LVAR_Gave_Locks_XP, 1);
               give_xp(EXP_LOCKPICK_NORMAL);
            end
         end
         else begin
            if (is_critical(LVar0)) then begin
               jam_lock(self_obj);
               if source_is_dude then
                  display_msg(mstr(110));
               else
                  display_msg(mstr(111) + obj_name(source_obj) + message_str(SCRIPT_JUNKJAIL, 112));
            end
            else begin
               if source_is_dude then
                  display_msg(mstr(103));
               else
                  display_msg(obj_name(source_obj) + message_str(SCRIPT_JUNKJAIL, 202));
            end
         end
      end
      else begin
         display_msg(mstr(109));//{109}{}{The door is already unlocked.}
      end
   end
end

procedure description_p_proc begin
   if (local_var(LVAR_Locked) == STATE_ACTIVE) then begin
      display_msg(mstr(104));//{104}{}{The door is locked.}
   end
end

procedure use_obj_on_p_proc begin
   variable item := obj_pid(obj_being_used_with);
   variable LVar0 := 0;
   variable test := 0;
   LVar0 := obj_being_used_with;

   if (item == PID_LOCKPICKS or item == PID_EXP_LOCKPICK_SET) then begin
      if (local_var(LVAR_Locked) == STATE_ACTIVE) then begin
         script_overrides;

         if (item == PID_EXP_LOCKPICK_SET) then
            test := roll_vs_skill(dude_obj, SKILL_LOCKPICK, 25);
         else
            test := roll_vs_skill(dude_obj, SKILL_LOCKPICK, 20);

         if (is_success(test)) then begin
            set_local_var(LVAR_Locked, STATE_INACTIVE);
            display_msg(mstr(100));//{100}{}{You unlock the door.}

            if (local_var(LVAR_Gave_Locks_XP) == 0) then begin
               set_local_var(LVAR_Gave_Locks_XP, 1);
               give_xp(EXP_LOCKPICK_NORMAL);
            end
         end
         else begin
            if (is_critical(test)) then begin
               rm_obj_from_inven(dude_obj, LVar0);
               destroy_object(LVar0);
               display_msg(mstr(101));//{101}{}{You broke your lockpicks!}
            end
            else begin
               display_msg(mstr(103));//{103}{}{You were not able to pick the lock.}
            end
         end
      end
      else begin
         display_msg(mstr(109));//{109}{}{The door is already unlocked.}
      end
   end
end

procedure map_update_p_proc begin
   Cell_Door_Ptr := self_obj;
   if (map_var(MVAR_OPENING_DOOR) != 0) then begin
      set_local_var(LVAR_Locked, STATE_INACTIVE);
   end
   if (local_var(LVAR_Locked) == STATE_ACTIVE) then begin
      obj_lock(self_obj);
   end
   else begin
      obj_unlock(self_obj);
   end
end

procedure damage_p_proc begin
   if (weapon_dmg_type(target_obj) == DMG_explosion) then begin
      set_global_var(GVAR_ENEMY_RAIDERS, 1);
      destroy_object(self_obj);
   end
   else begin
       display_msg(mstr(193));
   end
end
